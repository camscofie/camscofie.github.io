<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TGI on Yange Zheng</title>
    <link>https://yzheng.me/tags/tgi/</link>
    <description>Recent content in TGI on Yange Zheng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 02:08:20 +0200</lastBuildDate>
    
	<atom:link href="https://yzheng.me/tags/tgi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SAT</title>
      <link>https://yzheng.me/blogs/sat/</link>
      <pubDate>Fri, 22 May 2020 02:08:20 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/sat/</guid>
      <description>Definition von SAT Sei $U = {u_1,\dots,u_m}$ eine Menge von booleschen Variablen. ($u_i,\overline{u_i}$ heißen Literale). Eine Wahrheitsbelegung für $U$ ist eine Funktion $t:U\to {\text{wahr, falsch}}.$ Eine Klausel ist ein Boole&amp;rsquo;scher Ausdruck der Form $$ y_1 \vee \dots \vee y_s \text{ mit } y_i \in {u_1,\dots,u_m } \cup {\overline{u_1},\dots,\overline{u_m}}\cup{\text{wahr, falsch}} $$</description>
    </item>
    
    <item>
      <title>Komplexitätstheorie</title>
      <link>https://yzheng.me/blogs/komplexit%C3%A4tstheorie/</link>
      <pubDate>Sun, 11 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/komplexit%C3%A4tstheorie/</guid>
      <description>Deﬁnition: Problem Ein Problem Π ist gegeben durch: + eine allgemeine Beschreibung aller vorkommenden Parameter + eine genaue Beschreibung der Eigenschaften, die die Lösung haben soll Ein Problembeispiel /(Instanz) von Π erhalten wir, indem wir die Parameter von Π festlegen.
Deﬁnition: Kodierungsschema  Ein Kodierungsschema s ordnet jedem Problembeispiel eines Problems eine Zeichenkette oder Kodierung über einem Alphabet Σ zu. Die Inputlänge eines Problembeispiels ist die Anzahl des Symbole seiner Kodierung.</description>
    </item>
    
    <item>
      <title>Turing-Maschinen</title>
      <link>https://yzheng.me/blogs/turing_maschinen/</link>
      <pubDate>Sun, 11 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/turing_maschinen/</guid>
      <description>Die Registermaschine (RAM) Die RAM besteht aus: + Ein Programm besteht aus einer Folge von Befehlen. + Programmzeilen sind durchnummeriert. + Der Befehlszähler b startet bei 1 und enthält jeweils die Nummer des nächsten auszuführenden Befehls.  In den ersten Registern steht zu Beginn der Berechnung die Eingabe. In den übrigen Registern steht 0. Am Ende der Berechnung stehen die Ausgabedaten in vorher festgelegten Registern. Den Inhalt des Registers i bezeichnen wir mit c(i).</description>
    </item>
    
    <item>
      <title>Informationstheorie</title>
      <link>https://yzheng.me/blogs/informationstheorie/</link>
      <pubDate>Tue, 06 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/informationstheorie/</guid>
      <description>Deﬁnition von Information(信息量) Information I: des Auftretens eines Zeichens k + Information soll nie negativ sein: I ≥ 0 + Ein sicheres Ereignis soll keine Information liefern: Pr[(Pi = 1)] ⇒ I = 0 + Information soll stetig sein + Die Information einer Zeichenkette soll gleich der Summe der Einzelinformationen sein: I(pi·pj) = I(pi) + I(pj)
Sei p eine Wahrscheinlichkeit, die Information von p zur Basis b ist deﬁniert als:</description>
    </item>
    
    <item>
      <title>Grundbegriffe der Informatik</title>
      <link>https://yzheng.me/blogs/grundbegriffederinformatik/</link>
      <pubDate>Mon, 05 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/grundbegriffederinformatik/</guid>
      <description>Wörter  Ein endliches Alphabet Σ ist eine endliche Menge von Symbolen. Eine endliche Folge von Symbolen aus Σ heißt Wort (über Σ). In der Regel ist die Variable für ein Wort w. Die Menge aller Wörter über Σ heißt Σ∗ . Das heißt w ∈ Σ∗. Die Länge von w ist │w│. Das leere Wort ε mit │ε│ = 0 ist ∈ Σ∗ (∀Σ) Der Operator · bezeichne die Konkatenation, also Hintereinanderreihung, von Wörtern w1 &amp;hellip; wn.</description>
    </item>
    
    <item>
      <title>NP-completeness</title>
      <link>https://yzheng.me/blogs/npcompleteness/</link>
      <pubDate>Mon, 05 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/npcompleteness/</guid>
      <description>Deﬁnition Eine polynomiale Transformation einer Sprache L1 ⊆ Σ1∗ in eine Sprache L2 ⊆ Σ2∗ ist eine Funktion f : Σ1∗ → Σ2∗ mit den folgenden Eigenschaften: 1. Es existiert eine polynomiale deterministische Turing-Maschine, die f berechnet. 2. Für alle x ∈ Σ1^∗ gilt: x ∈ L1 ⇔ f(x) ∈ L2.
Wir schreiben dann L1 ∝ L2 (L1 ist polynomial transformierbar in L2 ). Intuitiv bedeutet L1 ∝ L2 , dass L2 gleich schwierig oder schwieriger als L 1 ist.</description>
    </item>
    
  </channel>
</rss>