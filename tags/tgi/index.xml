<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TGI on Yange Zheng</title>
    <link>https://yzheng.me/tags/tgi/</link>
    <description>Recent content in TGI on Yange Zheng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2020 19:07:55 +0200</lastBuildDate>
    
	<atom:link href="https://yzheng.me/tags/tgi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entscheidbarkeit</title>
      <link>https://yzheng.me/blogs/entscheidbarkeit/</link>
      <pubDate>Fri, 19 Jun 2020 19:07:55 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/entscheidbarkeit/</guid>
      <description>图灵机 一个deterministische Turing-Maschine ((D)TM) besteht aus:
 $Q$, einer endlicher Zustandsmenge
 $\Sigma$, einem endlichen Eingabealphabet,
 $\sqcup$, einem Blanksymbol mit $\sqcup \notin\Sigma$
 $\Gamma$, einem endlichen Bandalphabet mit $\Sigma\cup\{\sqcup\}\subseteq\Gamma$
 $s\in Q$, einem Startzustand
 $\delta: Q \times \Gamma \rightarrow Q \times \Gamma \times \{L,R,N\}$, einer Übergangsfunktion
 $F \subseteq Q$, einer Menge von Endzuständen.(Die Menge der Endzustände kann auch entfallen)
  Entscheidbarkeit  一个图灵机 akzeptiert 一个 Eingabe $w \in \Sigma^*$, 当TM $M$ 读取$w$ 后停在一个 $z \in F$ 的位置。</description>
    </item>
    
    <item>
      <title>Polynomial-time Reduction</title>
      <link>https://yzheng.me/blogs/polynomial-timereduction/</link>
      <pubDate>Fri, 19 Jun 2020 13:45:23 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/polynomial-timereduction/</guid>
      <description>给出一个问题，问这个问题是不是$NP-vollständig$ 的？
证明思路 1. 证这个问题是属于$NP$ 的：  eine potentielle Lösung der BBB-Problem können wir in einem polynomialen Algorithm prüfen.
 Das BBB liegt in $NP$.
  2. 建立一个Reduktion: Ruduktion von AAA auf BBB-Problem:  Gegeben sei eine AAA-Instanz, wir konstruieren eine BBB-Instanz
 Die Reduktion ist polynomiell
 sodass die beiden Instanzen lösbarkeitsäquivalent sind.
  3. 证明 AAA $\Rightarrow$ BBB 给出一个AAA 的正确答案，那么正确答案被Reduktion 后也就是一个BBB 的正确答案
4. 证明 BBB $\Rightarrow$ AAA 如上</description>
    </item>
    
    <item>
      <title>Pseudopolynomiale Algorithmen</title>
      <link>https://yzheng.me/blogs/pseudopolynomialealgorithmen/</link>
      <pubDate>Mon, 25 May 2020 15:59:05 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/pseudopolynomialealgorithmen/</guid>
      <description>Definiton In der Komplexitätstheorie wird ein Algorithmus pseudopolynomiell genannt, wenn seine Laufzeit ein Polynom im numerischen Wert der Eingabe ist.
解释 一个Algo 时间复杂度，一般是指给一个input，然后运算时间是这个input 的几倍/平方或者怎么怎么样。
然而这种说法是不严谨的，准确的形容一个algo的时间复杂度，应该是以input 的length 为单位来说明与runtime 的关系的。想一想，比较两个数，$5$ 是不是等于 $8$，计算机并不会去比较这两个数是不是相等，而是会去比较这两个数的二进制的每个bit 是不是相等。
Pseudopolynomiale Algorithmus Algo: 给出一个数 $n$, 请找随便这个数的两个因数，这眨眼一看时间复杂度好像是$O(n)$，因为从$2$开始遍历被$n$ 除就好。实际上这个algo 的时间复杂度并不是polynomial 的。
这个algo 的runtime 先看成是 $O(n)$。数$n$ 被计算机表示所需长度是 $O(\log n)$ bits. 用$x$ 来表示所需的bits 的位数即: $x = \log n \Rightarrow n = 2^x$。那我们algo 的runtime 也就上升到了$O(2^n)$，显而易见是一个exponential 已经不是polynomial 了，所以该algo 是一个Pseudopolynomiale Algorithmus!</description>
    </item>
    
    <item>
      <title>(SAT) Boolean satisfiability problem - Cook Levin theorem</title>
      <link>https://yzheng.me/blogs/sat-cooklevin-theorem/</link>
      <pubDate>Fri, 22 May 2020 02:08:20 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/sat-cooklevin-theorem/</guid>
      <description>Definition von SAT Sei $U = \{u_1,\dots,u_m\}$ eine Menge von booleschen Variablen. ($u_i,\overline{u_i}$ heißen Literale). Eine Wahrheitsbelegung für $U$ ist eine Funktion $t:U\to \{\text{wahr, falsch}\}.$ Eine Klausel ist ein Boole&amp;rsquo;scher Ausdruck der Form $$ y_1 \vee \dots \vee y_s \text{ mit } y_i \in \underbrace{\{u_1,\dots,u_m \} \cup \{\overline{u_1},\dots,\overline{u_m}\}}_{\text{Literalmenge}}\cup\{\text{wahr, falsch}\} $$
Dann ist SAT wie folgt definiert:  Gegeben: Menge $U$ von Variablen. Menge $C$ von Klauseln über $U$
 Frage: Existiert eine Wahrheitsbelegung von $U$, so dass $C$ erfüllt wird, d.</description>
    </item>
    
    <item>
      <title>Komplexitätstheorie</title>
      <link>https://yzheng.me/blogs/komplexit%C3%A4tstheorie/</link>
      <pubDate>Sun, 11 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/komplexit%C3%A4tstheorie/</guid>
      <description>Deﬁnition: Problem Ein Problem Π ist gegeben durch: + eine allgemeine Beschreibung aller vorkommenden Parameter + eine genaue Beschreibung der Eigenschaften, die die Lösung haben soll Ein Problembeispiel /(Instanz) von Π erhalten wir, indem wir die Parameter von Π festlegen.
Deﬁnition: Kodierungsschema  Ein Kodierungsschema s ordnet jedem Problembeispiel eines Problems eine Zeichenkette oder Kodierung über einem Alphabet Σ zu. Die Inputlänge eines Problembeispiels ist die Anzahl des Symbole seiner Kodierung.</description>
    </item>
    
    <item>
      <title>Turing-Maschinen</title>
      <link>https://yzheng.me/blogs/turing_maschinen/</link>
      <pubDate>Sun, 11 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/turing_maschinen/</guid>
      <description>Die Registermaschine (RAM) Die RAM besteht aus: + Ein Programm besteht aus einer Folge von Befehlen. + Programmzeilen sind durchnummeriert. + Der Befehlszähler b startet bei 1 und enthält jeweils die Nummer des nächsten auszuführenden Befehls.  In den ersten Registern steht zu Beginn der Berechnung die Eingabe. In den übrigen Registern steht 0. Am Ende der Berechnung stehen die Ausgabedaten in vorher festgelegten Registern. Den Inhalt des Registers i bezeichnen wir mit c(i).</description>
    </item>
    
    <item>
      <title>Informationstheorie</title>
      <link>https://yzheng.me/blogs/informationstheorie/</link>
      <pubDate>Tue, 06 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/informationstheorie/</guid>
      <description>Deﬁnition von Information(信息量) Information I: des Auftretens eines Zeichens k + Information soll nie negativ sein: I ≥ 0 + Ein sicheres Ereignis soll keine Information liefern: Pr[(Pi = 1)] ⇒ I = 0 + Information soll stetig sein + Die Information einer Zeichenkette soll gleich der Summe der Einzelinformationen sein: I(pi·pj) = I(pi) + I(pj)
Sei p eine Wahrscheinlichkeit, die Information von p zur Basis b ist deﬁniert als:</description>
    </item>
    
    <item>
      <title>Grundbegriffe der Informatik</title>
      <link>https://yzheng.me/blogs/grundbegriffederinformatik/</link>
      <pubDate>Mon, 05 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/grundbegriffederinformatik/</guid>
      <description>Wörter  Ein endliches Alphabet Σ ist eine endliche Menge von Symbolen. Eine endliche Folge von Symbolen aus Σ heißt Wort (über Σ). In der Regel ist die Variable für ein Wort w. Die Menge aller Wörter über Σ heißt Σ∗ . Das heißt w ∈ Σ∗. Die Länge von w ist │w│. Das leere Wort ε mit │ε│ = 0 ist ∈ Σ∗ (∀Σ) Der Operator · bezeichne die Konkatenation, also Hintereinanderreihung, von Wörtern w1 &amp;hellip; wn.</description>
    </item>
    
    <item>
      <title>NP-completeness</title>
      <link>https://yzheng.me/blogs/npcompleteness/</link>
      <pubDate>Mon, 05 Aug 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/npcompleteness/</guid>
      <description>Deﬁnition Eine polynomiale Transformation einer Sprache L1 ⊆ Σ1∗ in eine Sprache L2 ⊆ Σ2∗ ist eine Funktion f : Σ1∗ → Σ2∗ mit den folgenden Eigenschaften: 1. Es existiert eine polynomiale deterministische Turing-Maschine, die f berechnet. 2. Für alle x ∈ Σ1^∗ gilt: x ∈ L1 ⇔ f(x) ∈ L2.
Wir schreiben dann L1 ∝ L2 (L1 ist polynomial transformierbar in L2 ). Intuitiv bedeutet L1 ∝ L2 , dass L2 gleich schwierig oder schwieriger als L 1 ist.</description>
    </item>
    
  </channel>
</rss>