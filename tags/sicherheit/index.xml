<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sicherheit on Yange Zheng</title>
    <link>https://yzheng.me/tags/sicherheit/</link>
    <description>Recent content in sicherheit on Yange Zheng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2019 22:41:21 +0200</lastBuildDate>
    
	<atom:link href="https://yzheng.me/tags/sicherheit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Access Control</title>
      <link>https://yzheng.me/blogs/accesscontrol/</link>
      <pubDate>Tue, 30 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/accesscontrol/</guid>
      <description>Bell LaPadula A state machine model used for enforcing access control in government and military applications.
Definition  eine Menge S von Subjekten eine Menge O von Objekten eine Menge A = {read, write, append, excute} von Zugriﬀsoperation eine halbgeordnete Menge L von Sicherheitsleveln, auf der ein eindeutiges Maximum deﬁniert ist B ⊆ S × O × A die Menge aller aktuellen Zugriﬀe ist M = m(i,j)(i=..,j=&amp;hellip;),die Zugriﬀskontrollmatrix ist, deren Eintrag m(i,j) ⊆ A die erlaubten Zugriﬀe des Subjektes i auf das Objekt j beschreibt F = (f s , f c , f o ) ein Funktionstripel:  f s : S → L weist jedem Subjekt ein maximales Sicherheitslevel zu f c : S → L weist jedem Subjekt sein aktuelles Sicherheitslevel zu f o : O → L weist jedem Objekt ein Sicherheitslevel zu   Discretionary-Security/ds-Eigenschaft  user&amp;rsquo;s action is what it has predefined  ∀(s, o, a) ∈ B : a ∈ m(s,o)</description>
    </item>
    
    <item>
      <title>Encryption Methods for Kids</title>
      <link>https://yzheng.me/blogs/kidscipher/</link>
      <pubDate>Mon, 29 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/kidscipher/</guid>
      <description>Cäser Cipher Enc(K, M) = (Mi + K mod 26)
Bijective Projection * Plain: ABCDEFGHIJKLMNOPQRSTUVWXYZ * Cipher: XYZABCDEFGHIJKLMNOPQRSTUVW
Example: + Plaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG + Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
Problem: + no Schlüsselraum, (K ∈ {0, &amp;hellip; , 25}) + means: if M make sense, just try around then you find K
Hacking tips: + Get the most frequent letter out, guessing it&amp;rsquo;s &amp;lsquo;E&amp;rsquo; (if English).</description>
    </item>
    
    <item>
      <title>Security Games</title>
      <link>https://yzheng.me/blogs/securitygames/</link>
      <pubDate>Fri, 26 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/securitygames/</guid>
      <description>IND-CPA (Indistinguishability under Chosen Plaintext Attack) 言辞：攻击者生成两条等长的消息{a,b}，挑战者随机决定加密其中的一条消息，攻击者试图猜测被加密的是哪条消息。
Schema IND-CPA-sicher ⇔ kein eﬃzienter Angreifer A kann Chiﬀrate von selbstgewählten Klartexten unterscheiden 1. A erhält im Folgenden Zugriﬀ auf Enc(K, ·)-Orakel 2. A wählt zwei Nachrichten M (1) , M (2) gleicher Länge 3. A erhält C∗ := Enc(K, M (b) ) für gleichverteiltes b ∈ {1, 2} 4. A gewinnt, wenn er b richtig rät EUF-CMA (Existential Unforgeability under Chosen Message Attack): 言辞：攻击者有pk 和 Sig(sk,M) Oracle 的权限，攻击者生成伪造的信息和签名；攻击者获胜，如果伪造的签名解锁后等于被伪造的信息。</description>
    </item>
    
    <item>
      <title>Merkle–Damgård construction</title>
      <link>https://yzheng.me/blogs/damgardconstruction/</link>
      <pubDate>Thu, 25 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/damgardconstruction/</guid>
      <description> Merkle–Damgård construction is a method to build collision-resistant cryptographic hash functions from collision-resistant one-way compression functions.
Process  M* = M1 + M2 + M3 + &amp;hellip; + Mn Hi := f(Hi-1 + Mi); 1&amp;lt;i&amp;lt;n   MD-compliant padding  M is a prefix of Pad(M) length(M) = length(M&amp;rsquo;) =&amp;gt; len(Pad(M))=len(Pad(M&amp;rsquo;)) len(M) != len(M&amp;rsquo;) =&amp;gt; the last block of Pad(M) != last block of Pad(M&amp;rsquo;)  </description>
    </item>
    
    <item>
      <title>Block Cipher</title>
      <link>https://yzheng.me/blogs/blockcipher/</link>
      <pubDate>Wed, 24 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/blockcipher/</guid>
      <description>Electronic Codebook Mode (ECB-Modus)  Teile M in l Bit Blöcke M1, M2 &amp;hellip; Mn ∈ {0, 1}^l auf Setze C := (C1 , &amp;hellip; ) mit Ci := E(K, Mi) ∈ {0, 1}^l Entschlüsselung funktioniert genauso, nur mit D  Cipher Block Chaining Mode (CBC) + M: Message; C: Ciphertext; IP: Initial Vector; E: Encryption Algorithm; K: key
1. Encryption: + M = M1 + M2 + &amp;hellip; + Mn + C0 = IV + C1 = E(K, M1 Xor C0) + C2 = E(K, M2 Xor C1) + C = C1 + C2 + &amp;hellip; + Cn</description>
    </item>
    
    <item>
      <title>Asymmetrische Authentifikation</title>
      <link>https://yzheng.me/blogs/asymmetirscheauthentifikation/</link>
      <pubDate>Sat, 20 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/asymmetirscheauthentifikation/</guid>
      <description>Digitale Sinaturschemata  (pk,sk) &amp;lt;- Gen(1^k) wie bei Public-Key-Verschlüsselung. Signieren: σ &amp;lt;- Sig(sk,M) Verifizieren: Ver(pk,M,σ) = {0,1}  EUF-CMA (Existential Unforgeability under Chosen Message Attack): Schema IND-CPA-sicher ⇔ kein PPT-Angreifer A wins. 1. A has pk and access to Sig(sk,)-Orakel 2. A gives (M,σ) 3. A wins, when Ver(pk,M,σ) = 1 and M != M. RSA als Signaturschema sig(sk,M) = M^d mod N
Ver(pk,M,σ)=1 :&amp;lt;=&amp;gt; M=σ^e mod N
Problem bei RSA:  Unsinnige Nachrichten können signiert werden.</description>
    </item>
    
    <item>
      <title>Asymmetrische Encryption</title>
      <link>https://yzheng.me/blogs/asymmetrischeencryption/</link>
      <pubDate>Tue, 16 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/asymmetrischeencryption/</guid>
      <description>RSA Process RSA Key generation  choose P != Q, both prime N = P x Q, λ(N) = (P-1)(Q-1) pick e from (3,&amp;hellip;,λ(N)-1), ggt(e,λ(N)) = 1 calculate d ≡ e^(−1) (mod λ(N)). //d⋅e ≡ 1 (mod λ(n)) pk = (N,e); sk = (N,d)  Encryption c(m) ≡ m^(e) mod N
Decryption m&amp;copy; ≡ c^(d) mod N
Tricks zum Rechnen:  51^2 mod 59 = (59-8)^2 mod 59 = (-8)^2 mod 59 3^60 mod 59 = 3^(60 mod 58) mod 59 = 3^2 mod 59.</description>
    </item>
    
    <item>
      <title>Precomputed hash chains and Rainbow table</title>
      <link>https://yzheng.me/blogs/precomputedhashchainsandrainbowtable/</link>
      <pubDate>Tue, 02 Jul 2019 22:41:21 +0200</pubDate>
      
      <guid>https://yzheng.me/blogs/precomputedhashchainsandrainbowtable/</guid>
      <description>Reversing Cryptographic Hash Functions  What to do if you have a hashed Message H(msg), and you want to have &amp;lsquo;msg&amp;rsquo;?
 Because the hash function is always one way, the way to get the message from the hashed code is to try a lot with different word, and see if you end up have same hashed code as H(msg).
Precomputed Hash Chains We trade time with space. What do we do is, we compute the H(*) before everything happened.</description>
    </item>
    
  </channel>
</rss>